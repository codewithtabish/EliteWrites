generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  username      String?         @unique
  profilePic    String?  
  bio           String?  
  earnings      Float?          @default(0.0)  
  canWithdraw   Boolean         @default(false)  
  onBoardingScreen Boolean      @default(false)
  createdBlogs   Int?  @default(0)
  userType    USERTYPE @default(FREE)
  

  categories   String[]

  blogs         BlogPost[]
  comments      Comment[]
  likes         Like[]
  shares        Share[]
  bookmarks     Bookmark[]
  followers     Follower[] @relation("FollowedUsers")
  following     Follower[] @relation("FollowingUsers")
  readHistory   ReadHistory[]  

  notificationsReceived Notification[] @relation("UserNotifications")
  notificationsSent     Notification[] @relation("SenderNotifications")

  subscription  Subscription?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model BlogPost {
  id         String   @id @default(uuid())
  title      String
  content    String
  imageUrl   String?
  slug      String?
  status    BlogStausType @default(ACTIVE)
  category   String
  tags       String[]
  isPremium  Boolean  @default(false)  
  earning    Float?   @default(0.0) // Earnings for this blog  
  views      Int?      @default(0) // Track total unique views  

  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  comments   Comment[]
  likes      Like[]
  shares     Share[]
  bookmarks  Bookmark[]
  readHistory ReadHistory[] // Tracks unique views  

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReadHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId]) // Prevent duplicate reads
}

model Category {
  id    String  @id @default(uuid())
  name  String  @unique
}

model Notification {
  id        String  @id @default(uuid())
  
  user      User    @relation(name: "UserNotifications", fields: [userId], references: [id])
  userId    String
  
  sender    User    @relation(name: "SenderNotifications", fields: [senderId], references: [id])
  senderId  String

  type      String  
  blogId    String? 
  commentId String? 
  isRead    Boolean @default(false) 
  createdAt DateTime @default(now())
}



model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique(map: "UniqueUserSubscription") 
  status     String   @default("active") 
  planType   PlanType @default(FREE) // Uses Enum  
  startDate  DateTime @default(now())
  endDate    DateTime?
  createdAt  DateTime @default(now())
}


model Follower {
  id          String  @id @default(uuid())
  follower    User    @relation("FollowingUsers", fields: [followerId], references: [id])
  followerId  String
  following   User    @relation("FollowedUsers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost? @relation(fields: [blogId], references: [id])
  blogId    String?
  comment   Comment?  @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Share {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId])
}




enum PlanType {
  FREE
  REMINYM_YEARLY
  LIFETIME_GENERATOR
}

enum BlogStausType{
  ACTIVE
  DRAFT
  ARCHIVED
  EXPIRED

}

enum USERTYPE {
  FREE
  REMINYM_YEARLY
  LIFETIME_GENERATOR
}