generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  // password      String
  categories    String[] // ✅ This stores an array of category names as strings
  profilePic    String?  
  bio           String?  
  isPremium     Boolean         @default(false) // True if user has a subscription  

  blogs         BlogPost[]
  comments      Comment[]
  likes         Like[]
  shares        Share[]
  bookmarks     Bookmark[]
  followers     Follower[] @relation("FollowedUsers")
  following     Follower[] @relation("FollowingUsers")

  // categories Categories[]
  // @relation("Categories")
  // selectedCategories Category[] @relation("UserCategories", references: [id]) // ✅ Store selected categories


  notificationsReceived Notification[] @relation("UserNotifications") // ✅ Fix relation
  notificationsSent     Notification[] @relation("SenderNotifications") // ✅ Fix relation

  subscription  Subscription?   // One-to-one relation

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Category {
  id    String  @id @default(uuid())
  name  String  @unique
  // users User[]  @relation("UserCategories", references: [id]) // ✅ Many-to-Many relation with users
}

model Notification {
  id        String  @id @default(uuid())
  
  user      User    @relation(name: "UserNotifications", fields: [userId], references: [id]) // ✅ Receiver of notification
  userId    String
  
  sender    User    @relation(name: "SenderNotifications", fields: [senderId], references: [id]) // ✅ Sender of notification
  senderId  String

  type      String  // "like", "comment", "share", "follow"
  blogId    String? // Optional, if related to a blog
  commentId String? // Optional, if related to a comment
  isRead    Boolean @default(false) // Track read/unread status
  createdAt DateTime @default(now())
}

model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id]) // ✅ Defined here only
  userId     String   @unique(map: "UniqueUserSubscription") 
  status     String   @default("active") // "active", "canceled", "expired"
  startDate  DateTime @default(now())
  endDate    DateTime
  createdAt  DateTime @default(now())
}


model Follower {
  id          String  @id @default(uuid())
  follower    User    @relation("FollowingUsers", fields: [followerId], references: [id])
  followerId  String
  following   User    @relation("FollowedUsers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model BlogPost {
  id         String   @id @default(uuid())
  title      String
  content    String
  imageUrl   String?
  category   String
  tags       String[]

  isPremium  Boolean  @default(false) // True = Requires subscription, False = Free

  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  comments   Comment[]
  likes      Like[]
  shares     Share[]
  bookmarks  Bookmark[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost? @relation(fields: [blogId], references: [id])
  blogId    String?
  comment   Comment?  @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Share {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      BlogPost @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId]) // Prevent duplicate bookmarks
}


